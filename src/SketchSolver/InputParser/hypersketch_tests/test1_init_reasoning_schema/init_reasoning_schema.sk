void print_int(int x);

int get_2bit_id(int n_in, int n_out, int ioro0, int x0, int ioro1, int x1, bit[n_in] input, bit[n_out] output){
    int id = 0;
    if(ioro0==0) {
        id+=input[x0];
    }
    else {
        id+=output[x0];
    }
    if(ioro1==0) {
        id+=2*input[x1];
    }
    else {
         id+=2*output[x1];
    }
    return id;
}

generator void learnable_primitive(
    int m, int n_in, int n_out, bit[n_in][m] inbits, bit[n_out][m] outbits,
    bit[n_in] input, ref bit[n_out] output, ref bit[n_out] output_mask, ref int num_done)
{
    int ioro0 = ??(1);
    int x0 = ??;
    print_int(ioro0); //if 0 is input, if 1 is output
    print_int(x0);
    if(ioro0 == 0) {
        assert(0 <= x0 && x0 < n_in);
    }
    else {
        assert(0 <= x0 && x0 < n_out-1);
        assert(output_mask[x0] == 1);
    }
    int ioro1 = ??(1);
    int x1 = ??;
    print_int(ioro1); //if 0 is input, if 1 is output
    print_int(x1);
    if(ioro1 == 0) {
        assert(ioro0 == 0);
        assert(x0 <= x1 && x1 < n_in);
    }
    else {
        if(ioro0 == 1) {
            assert(x0 <= x1);
        }
        assert(0 <= x1 && x1 < n_out);
        assert(output_mask[x1] == 1);
    }
    int y = ??;
    print_int(y);
    assert(0 <= y && y < n_out);
    assert(output_mask[y] == 0);

    int num_ids = 4;
    bit[num_ids] undetermined;
    bit[num_ids] seen;
    bit[num_ids] table;
    for(int i = 0;i<m;i++) {
        int id = get_2bit_id(n_in, n_out, ioro0, x0, ioro1, x1, inbits[i], outbits[i]);
        if(seen[id] == 1) {
            if(table[id] != outbits[i][y]) {
                undetermined[id] = 1;
            }
        }
        else {
            seen[id] = 1;
            table[id] = outbits[i][y];
        }
    }

    /*bit[num_ids] _seen = ??;
    assert(_seen == seen);
    bit[num_ids] _undetermined = ??;
    assert(_undetermined == undetermined);
    bit[num_ids] _table = ??;
    assert(_table == table);*/

    int id = get_2bit_id(n_in, n_out, ioro0, x0, ioro1, x1, input, output);

    if(undetermined[id] == 0) {
        output_mask[y] = 1;
        num_done += 1;
        output[y] = table[id];
    }
}

void reasoning_schema(int m, int n_in, int n_out, bit[n_in][m] inbits, bit[n_out][m] outbits, bit[n_in] input, ref bit[n_out] output, ref bit[n_out] output_mask, ref int num_done)
{
    int at_num_done = ??;
    assert(num_done == at_num_done);
    repeat(3) {
        if(num_done < n_out) {
            learnable_primitive(m, n_in, n_out, inbits, outbits, input, output, output_mask, num_done);
        }
        at_num_done = ??;
        assert(num_done == at_num_done);
    }
    assert(num_done <= n_out);
}

@FromFile("metaexample.data")
harness void sketch_main(int m, int n_in, int n_out, bit[n_in][m] inbits, bit[n_out][m] outbits)
{
    for(int i = 0;i<m;i++){
        bit[n_out] output;
        bit[n_out] output_mask;
        int num_done = 0;
        reasoning_schema(m, n_in, n_out, inbits, outbits, inbits[i], output, output_mask, num_done);
        assert(num_done == n_out);
        for(int j = 0;j<n_out;j++) {
            assert(output[j] == outbits[i][j]);
        }
    }
}


//and
//4 2 1 { {0, 0}, {0, 1}, {1, 0}, {1, 1} } { {0}, {0}, {0}, {1} }
//8 3 2 { {0, 0, 0}, {0, 1, 0}, {1, 0, 0}, {1, 1, 0}, {0, 0, 1}, {0, 1, 1}, {1, 0, 1}, {1, 1, 1} } { {0, 0}, {0, 1}, {0, 0}, {1, 1}, {0, 1}, {0, 1}, {0, 1}, {1, 1} }
//8 3 3 { {0, 0, 0}, {0, 1, 0}, {1, 0, 0}, {1, 1, 0}, {0, 0, 1}, {0, 1, 1}, {1, 0, 1}, {1, 1, 1} } { {0, 0, 1}, {0, 1, 0}, {0, 0, 1}, {1, 1, 1}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 1, 1} }
//16 4 3 { {0, 0, 0, 0}, {1, 0, 0, 0}, {0, 1, 0, 0}, {1, 1, 0, 0}, {0, 0, 1, 0}, {1, 0, 1, 0}, {0, 1, 1, 0}, {1, 1, 1, 0}, {0, 0, 0, 1}, {1, 0, 0, 1}, {0, 1, 0, 1}, {1, 1, 0, 1}, {0, 0, 1, 1}, {1, 0, 1, 1}, {0, 1, 1, 1}, {1, 1, 1, 1} } { {0, 0, 0}, {1, 0, 0}, {1, 0, 0}, {0, 1, 0}, {1, 0, 0}, {0, 1, 0}, {0, 1, 0}, {1, 1, 0}, {1, 0, 0}, {0, 1, 0}, {0, 1, 0}, {1, 1, 0}, {0, 1, 0}, {1, 1, 0}, {1, 1, 0}, {0, 0, 1} }

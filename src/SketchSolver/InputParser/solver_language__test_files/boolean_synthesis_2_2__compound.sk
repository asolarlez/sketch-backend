pragma options "--bnd-unroll-amnt 197";
pragma options "--fe-output-code";
pragma options "--bnd-arr-size 197";
//pragma options "--slv-lightverif";

/*
struct HypothesisSpace
{
    int choice_of_hs;

    //A = and({units}) params: width
    //O = or({units}) params: width
    //AO = and({O}) params: width0, width1
    //OA = or({A}) params: width0, width1
    //AOA = and({OA}) params: width0, width1, width2
    //OAO = or({AO}) params: width0, width1, width2
    //...

    //* = A*|O*
    //expr = if(expr) then (expr) else (expr)

    //expr = and(expr, expr) | or(expr, expr)

    //expr = not(expr) |  and(expr, expr) | or(expr, expr) |  if(expr) then expr else expr.

    //leaf = AO | OA
    // expr = if(leaf) then leaf else leaf

}*/

struct Data
{
    int num_bools;
    bit[num_bools] bools;
}

void print_not() {}
void print_unit(int id){}

int num_units = 0;

generator bit unit(Data data)
{
    num_units+=1;
    bit not = ??;
    if(not)
    {
        print_not();
    }
    int bool_id = ??(8);
    print_unit(bool_id);
    if(not){
        if(data.bools[bool_id])
        {
            return 0;
        }
        else
        {
            return 1;
        }
    }
    else{
        return data.bools[bool_id];
    }
}

generator bit and_rec(Data data, bit rez, int length)
{
    assert(length >= 1);
    if(!unit(data))
    {
        rez = 0;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return and_rec(data, rez, length-1);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

void print_init_and(){}
void print_end_and(){}

generator bit and(Data data, int length)
{
    assert(length >= 1);
    print_init_and();
    bit rez = and_rec(data, 1, length);
    print_end_and();
    return rez;
}

generator bit or_rec(Data data, bit rez, int length)
{
    assert(length >= 1);
    if(unit(data))
    {
        rez = 1;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return or_rec(data, rez, length-1);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

void print_init_or(){}
void print_end_or(){}

generator bit or(Data data, int length)
{
    print_init_or();
    bit ret = or_rec(data, 0, length);
    print_end_or();
    return ret;
}

generator bit and_of_or_rec(Data data, bit rez, int length, int or_length)
{
    assert(length >= 1);
    if(!or(data, or_length))
    {
        rez = 0;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return and_of_or_rec(data, rez, length-1, or_length);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

generator bit and_of_or(Data data, int length, int or_length)
{
    print_init_and();
    bit ret = and_of_or_rec(data, 1, length, or_length);
    print_end_and();
    return ret;
}

generator bit or_of_and_rec(Data data, bit rez, int length, int and_length)
{
    assert(length >= 1);
    if(and(data, and_length))
    {
        rez = 1;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return or_of_and_rec(data, rez, length-1, and_length);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

generator bit or_of_and(Data data, int length, int and_length)
{
    print_init_or();
    bit ret = or_of_and_rec(data, 0, length, and_length);
    print_end_or();
    return ret;
}

generator bit choice_of_subtree_d_1(Data data, int length)
{
    return {|and(data, length) | or(data, length)|};
}

generator bit choice_of_subtree_d_2(Data data, int length0, int length1)
{
    return {|and_of_or(data, length0, length1) | or_of_and(data, length0, length1)|};
}


generator bit choice(Data data, int l0, int l1)
{
    //bit ret = and(data, l0);
    //bit ret = or(data, l0);
    //bit ret = choice_of_subtree_d_1(data, l0);
    //bit ret = and_of_or(data, l1, l0);
    //bit ret = or_of_and(data, l1, l0);
    bit ret = choice_of_subtree_d_2(data, l1, l0);
    return ret;
}

void print_init_if();
void print_end_if();

generator bit _my_if(Data data, int cond_l0, int cond_l1, int true_l0, int true_l1, int false_l0, int false_l1)
{
    print_init_if();
    bit cond = choice(data, cond_l0, cond_l1);
    bit ret;
    if(cond)
    {
        ret = choice(data, true_l0, true_l1);
    }
    else
    {
        ret = choice(data, false_l0, false_l1);
    }
    print_end_if();
    return ret;
}

generator bit predicate(Data data, int l0, int l1)
{
    //return {|0|1|};

    bit not = 0;
    if(not)
    {
        print_not();
    }
    //bit ret = my_if(data, l0, l1, l0, l1, l0, l1);
    //bit ret = and(data, l0);
    //bit ret = or(data, l0);
    //bit ret = choice_of_subtree_d_1(data, l0);
    //bit ret = and_of_or(data, l1, l0);
    //bit ret = or_of_and(data, l1, l0);
    bit ret = choice_of_subtree_d_2(data, l1, l0);
    if(not)
    {
        return !ret;
    }
    else
    {
        return ret;
    }
}

generator bit compound_predicate(bit out_left, bit out_right, Data data, int l0, int l1)
{

    if(predicate(data, l0, l1))
    {
        return out_left;
    }
    else
    {
        return out_right;
    }
}

bit predicate_lvl0(Data data, int l0, int l1)
{
    return predicate(data, l0, l1);
}

bit predicate_lvl0_left(Data data, int l0, int l1)
{
    return predicate(data, l0, l1);
}

bit predicate_lvl0_right(Data data, int l0, int l1)
{
    return predicate(data, l0, l1);
}

bit predicate_lvl1(Data data, int l0, int l1)
{
    return compound_predicate(
        predicate_lvl0_left(data, l0, l1),
        predicate_lvl0_right(data, l0, l1),
        data, l0, l1
    );
}

int meta_l0 = 2;
int meta_l1 = 2;

@FromFile("/Users/klimentserafimov/CLionProjects/sketch-backend/src/SketchSolver/InputParser/solver_language__test_files/uav_kg_big__as_bools.data")
harness void main_lvl1(int num_bools, bit[num_bools] bools, bit out)
{
    Data data = new Data(num_bools = num_bools, bools = bools);
    int l0 = meta_l0;
    int l1 = meta_l0;
    assert(predicate_lvl1(data, l0, l1) == out);
    //minimize(num_units);
}

@FromFile("/Users/klimentserafimov/CLionProjects/sketch-backend/src/SketchSolver/InputParser/solver_language__test_files/uav_kg_big__as_bools.data")
harness void main_lvl0_left(int num_bools, bit[num_bools] bools, bit out)
{
    Data data = new Data(num_bools = num_bools, bools = bools);
    int l0 = meta_l0;
    int l1 = meta_l0;
    assert(predicate_lvl0_left(data, l0, l1) == out);
}

@FromFile("/Users/klimentserafimov/CLionProjects/sketch-backend/src/SketchSolver/InputParser/solver_language__test_files/uav_kg_big__as_bools.data")
harness void main_lvl0_right(int num_bools, bit[num_bools] bools, bit out)
{
    Data data = new Data(num_bools = num_bools, bools = bools);
    int l0 = meta_l0;
    int l1 = meta_l0;
    assert(predicate_lvl0_right(data, l0, l1) == out);
}

pragma options "--bnd-arr-size 9";
pragma options "--bnd-inline-amnt 1";

void print_not() {}
void print_unit(int id){}

generator bit unit(int num_bools, bit[num_bools] bools)
{
    bit not = ??;
    if(not)
    {
        print_not();
    }
    int bool_id = ??(4);
    print_unit(bool_id);
    if(not){
        if(bools[bool_id])
        {
            return 0;
        }
        else
        {
            return 1;
        }
    }
    else{
        return bools[bool_id];
    }
}

generator bit and_rec(int num_bools, bit[num_bools] bools, bit rez, int length)
{
    assert(length >= 1);
    if(!unit(num_bools, bools))
    {
        rez = 0;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return and_rec(num_bools, bools, rez, length-1);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

void print_init_and(){}
void print_end_and(){}

generator bit and(int num_bools, bit[num_bools] bools, int length)
{
    assert(length >= 1);
    print_init_and();
    bit rez = and_rec(num_bools, bools, 1, length);
    print_end_and();
    return rez;
}

generator bit or_rec(int num_bools, bit[num_bools] bools, bit rez, int length)
{
    assert(length >= 1);
    if(unit(num_bools, bools))
    {
        rez = 1;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return or_rec(num_bools, bools, rez, length-1);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

void print_init_or(){}
void print_end_or(){}

generator bit or(int num_bools, bit[num_bools] bools, int length)
{
    print_init_or();
    bit ret = or_rec(num_bools, bools, 0, length);
    print_end_or();
    return ret;
}

generator bit and_of_or_rec(int num_bools, bit[num_bools] bools, bit rez, int length, int or_length)
{
    assert(length >= 1);
    if(!or(num_bools, bools, or_length))
    {
        rez = 0;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return and_of_or_rec(num_bools, bools, rez, length-1, or_length);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

generator bit and_of_or(int num_bools, bit[num_bools] bools, int length, int or_length)
{
    print_init_and();
    bit ret = and_of_or_rec(num_bools, bools, 1, length, or_length);
    print_end_and();
    return ret;
}

generator bit or_of_and_rec(int num_bools, bit[num_bools] bools, bit rez, int length, int and_length)
{
    assert(length >= 1);
    if(and(num_bools, bools, and_length))
    {
        rez = 1;
    }
    if(length >= 2)
    {
        bit cont = ??;
        if(cont)
        {
            return or_of_and_rec(num_bools, bools, rez, length-1, and_length);
        }
        else
        {
            return rez;
        }
    }
    else
    {
        return rez;
    }
}

generator bit or_of_and(int num_bools, bit[num_bools] bools, int length, int and_length)
{
    print_init_or();
    bit ret = or_of_and_rec(num_bools, bools, 0, length, and_length);
    print_end_or();
    return ret;
}

generator bit choice_of_subtree_d_1(int num_bools, bit[num_bools] bools, int length)
{
    return {|and(num_bools, bools, length) | or(num_bools, bools, length)|};
}

generator bit choice_of_subtree_d_2(int num_bools, bit[num_bools] bools, int length0, int length1)
{
    return {|and_of_or(num_bools, bools, length0, length1) | or_of_and(num_bools, bools, length0, length1)|};
}

void print_init_if() {}
void print_end_if() {}

generator bit predicate_generator(int num_bools, bit[num_bools] bools)
{
    int l1 = 2;
    int l0 = 2;
    return choice_of_subtree_d_2(num_bools, bools, l1, l0);
}

generator bit program_generator(int num_bools, bit[num_bools] bools) {
    return predicate_generator(num_bools, bools);
}

bit predicate(int num_bools, bit[num_bools] bools)
{
    return predicate_generator(num_bools, bools);
}

bit condition(int num_bools, bit[num_bools] bools) {return ??;}

bit if_true_branch(int num_bools, bit[num_bools] bools) {return ??;}

bit if_false_branch(int num_bools, bit[num_bools] bools) {return ??;}

bit composite_predicate(int num_bools, bit[num_bools] bools) {
    if(condition(num_bools, bools)) {
        return if_true_branch(num_bools, bools);
    }
    else {
        return if_false_branch(num_bools, bools);
    }
}

bit program_lvl0(int num_bools, bit[num_bools] bools) {
    return program_generator(num_bools, bools);
}

bit dummy_program(int num_bools, bit[num_bools] bools) {return 1;}

@FromFile("/Users/klimentserafimov/CLionProjects/sketch-backend/src/SketchSolver/InputParser/solver_language__test_files/uav_kg_big__as_bools.data")
harness void sketch_main(int num_bools, bit[num_bools] bools, bit out)
{
    assert(dummy_program(num_bools, bools) == out);
}

@FromFile("/Users/klimentserafimov/CLionProjects/sketch-backend/src/SketchSolver/InputParser/solver_language__test_files/uav_kg_big__as_bools.data")
harness bit eval_program_main(int num_bools, bit[num_bools] bools, bit out)
{
    return dummy_program(num_bools, bools);
}

@FromFile("/Users/klimentserafimov/CLionProjects/sketch-backend/src/SketchSolver/InputParser/solver_language__test_files/uav_kg_big__as_bools.data")
harness void dummy_main(int num_bools, bit[num_bools] bools, bit out)
{
    assert(eval_program_main(num_bools, bools, out));
    assert(dummy_program(num_bools, bools) == 0);
    assert(predicate(num_bools, bools) == 0);
    assert(program_lvl0(num_bools, bools) == out);
    assert(composite_predicate(num_bools, bools) == out);
}
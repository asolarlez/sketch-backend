
generator int possible_weights() {
    return {|-1 | 0 | 1 |};
}

int bit_to_int(bit b) {
    if(b) {
        return 1;
    } else {
        return 0;
    }
}

@FromFile("/Users/klimentserafimov/CLionProjects/sketch-backend/src/SketchSolver/InputParser/solver_language__test_files/uav_kg_big__as_bools.data")
harness void sketch_main(int _n, bit[_n] _inputs, bit _out)
{
    int n = 9;
    assert(_n == n);

    int[_n] inputs;
    int out;
    for(int i = 0;i<_n;i++) {
        inputs[i] = bit_to_int(_inputs[i]);
    }
    out = bit_to_int(_out);

    int m = 1; // num outputs;
    int max_num_ones = 256;
    int num_layers = 1;
    int layer_width =  n;

    int[num_layers * layer_width] vals;
    int[num_layers * layer_width] bias = ??(3);

    int num_input_weights = layer_width * n;
    int[num_input_weights] input_weights;
    repeat(i : num_input_weights) {
        input_weights[i] = possible_weights();
    }

    int num_mid_weights = (num_layers - 1) * layer_width * layer_width;
    int[num_mid_weights] mid_weights;
    repeat(i : num_mid_weights) {
        mid_weights[i] = possible_weights();
    }

    int[m] output_vals;
    int[m] output_bias = ??(3);
    int num_output_weights = layer_width * m;
    int[num_output_weights] output_weights;
    repeat(i : num_output_weights) {
        output_weights[i] = possible_weights();
    }

    int sum_num_weights = num_input_weights + num_mid_weights + num_output_weights;

    int sum_ones = 0;

    int count_iters = 0;

    // input and mid layers
    for(int i = 0;i<num_layers;i++) {
        for(int j = 0;j<layer_width;j++) {
            int val_idx = i*layer_width + j;
            int sum = 0;
            if(i == 0) {
                //inputs are input layer
                for(int k = 0; k < n;k++) {
                    int weight_idx = j*n + k;
                    sum += (int)(input_weights[weight_idx] * inputs[k]);
                    sum_ones += input_weights[weight_idx]*input_weights[weight_idx];
                    //assert(sum_ones <= max_num_ones);
                    count_iters++;
                }
            } else {
                //inputs are previous layer
                for(int k = 0; k < layer_width;k++) {
                    int weight_idx = (i-1)*layer_width*layer_width + j*layer_width + k;
                    int prev_val_k_idx = (i-1)*layer_width + k;
                    sum += (int)(mid_weights[weight_idx] * vals[prev_val_k_idx]);
                    sum_ones += mid_weights[weight_idx]*mid_weights[weight_idx];
                    //assert(sum_ones <= max_num_ones);
                    count_iters++;
                }
            }
            vals[val_idx] = bit_to_int(sum >= bias[val_idx]);
        }
    }

    //assert(count_iters == layer_width*n + layer_width*layer_width*(num_layers-1));

    for(int val_idx = 0; val_idx < m; val_idx++) {
        int sum = 0;
        for(int k = 0; k < layer_width;k++) {
            int weight_idx = val_idx*layer_width + k;
            int prev_val_k_idx = (num_layers-1)*layer_width + k;
            sum += (int)(output_weights[weight_idx] * vals[prev_val_k_idx]);
            sum_ones += output_weights[weight_idx]*output_weights[weight_idx];
            //assert(sum_ones <= max_num_ones);
        }
        output_vals[val_idx] = bit_to_int(sum >= output_bias[val_idx]);
    }

    assert(output_vals[0] == out);

    //assert(sum_ones <= max_num_ones);
    //int _sum_ones = ??(10);
    //assert(_sum_ones == sum_ones);

}